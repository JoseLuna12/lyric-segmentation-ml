# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.
#  For PyCharm Community Edition, use 'PyCharm CE'
.idea/

# VS Code
.vscode/

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# macOS
**/.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~

# Machine Learning specific
# Model files (keep training checkpoints out of git due to size)
*.pt
!training_sessions/**/*.pt
*.pth
*.h5
*.hdf5
*.pkl
*.pickle
*.joblib
*.model

# Training outputs and logs
logs/
!training_sessions/**/logs/
!results/**/logs/
!cnn_optuna_results/**/logs/
tensorboard_logs/
!training_sessions/**/tensorboard_logs/
!results/**/tensorboard_logs/
!cnn_optuna_results/**/tensorboard_logs/
wandb/
!training_sessions/**/wandb/
!results/**/wandb/
!cnn_optuna_results/**/wandb/
mlruns/
!training_sessions/**/mlruns/
!results/**/mlruns/
!cnn_optuna_results/**/mlruns/

# Data files (usually too large for git, manage separately)
data/raw/
data/processed/
data/external/
*.csv
!results/**/*.csv
!cnn_optuna_results/**/*.csv
*.tsv
*.json
!training_sessions/**/*.json
!results/**/*.json
!cnn_optuna_results/**/*.json
*.jsonl
!data/*.jsonl
*.yaml
!training_sessions/**/*.yaml
!configs/**/*.yaml
!cnn_optuna_results/**/*.yaml
!results/**/*.yaml
*.db
!cnn_optuna_results/**/*.db
*.txt
!training_sessions/**/*.txt
!results/**/*.txt
!cnn_optuna_results/**/*.txt
*.parquet
*.feather

# Metrics and results
metrics/
!segmodel/metrics/
!training_sessions/**/metrics/
!results/**/metrics/
!cnn_optuna_results/**/metrics/
outputs/
!training_sessions/**/outputs/
!results/**/outputs/
!cnn_optuna_results/**/outputs/
checkpoints/
!training_sessions/**/checkpoints/
!results/**/checkpoints/
!cnn_optuna_results/**/checkpoints/

# Temporary files
tmp/
temp/
*.tmp

# Configuration files with secrets
config.local.yaml
config.secret.yaml
.secrets

# Experiment tracking
experiments/
!training_sessions/**/experiments/
!results/**/experiments/
!cnn_optuna_results/**/experiments/
runs/
!training_sessions/**/runs/
!results/**/runs/
!cnn_optuna_results/**/runs/

# Make sure we include all files in these directories
!training_sessions/**/*.*
!results/**/*.*
!cnn_optuna_results/**/*.*

# Large files
*.zip
*.tar.gz
*.rar
*.7z

!requirements.txt
